# Travaux-Diriges
import java.util.Scanner;

public class Class_3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// Exercice 4.1
		double[][] tab = new double[3][4];
		double moyenne = 0;
		Scanner scan = new Scanner(System.in);
		for (int i = 0; i < tab[1].length; ++i) {
			for (int j = 0; j < tab.length; ++j) {
				tab[j][i] = (int) (Math.random() * 10);
			}
		}
		for (int i = 0; i < tab[1].length; ++i) {
			for (int j = 0; j < tab.length; ++j) {
				System.out.print("|" + tab[j][i]);
			}
			System.out.print("|\r\n");
		}
		moyenne = moyenne(tab);
		int valeurs = tab.length * tab[0].length;
		Integer inferieurs = denombrement(tab, moyenne);
		Integer superieurouegal = valeurs - denombrement(tab, moyenne);
		System.out.println("La moyenne est : " + moyenne);
		System.out.println("Les coordonnées de la moyenne sont : [" + recherche(tab, Math.floor(moyenne))[1] + ";"
				+ recherche(tab, Math.floor(moyenne))[0] + "]");
		System.out.print("Tableau inferieur : ");
		affichage_plat(echantillon_inferieur(tab, moyenne, inferieurs));
		System.out.print("Tableau supérieur : ");
		affichage_plat(echantillon_superieur_egal(tab, moyenne, superieurouegal));
		System.out.print("Tableau trié : ");
		affichage_plat(tri_a_bulle(aplanissement(tab, valeurs)));
		System.out.print("\r\n");
		System.out.print("Rechercher une valeur ? ");
		int reponse = scan.nextInt();
		System.out.print("Son rang est : " + Dichotomie(aplanissement(tab, valeurs), reponse));
	}

	public static void affichage_plat(double[] Liste) {
		System.out.print("|");
		for (int j = 0; j < Liste.length; ++j) {
			System.out.print(Liste[j] + "|");
		}
		System.out.print("\r\n");
	}

	public static double moyenne(double tableau[][]) {
		double M = 0;
		for (double[] i : tableau) {
			for (double j : i) {
				M += j;
			}
		}
		return (M / (tableau[1].length * tableau.length));
	}

	public static int[] recherche(double tableau[][], double moyenne) {
		int[] coordonees = new int[2];
		for (coordonees[0] = 0; coordonees[0] < tableau[1].length - 1; ++coordonees[0]) {
			for (coordonees[1] = 0; coordonees[1] < tableau.length - 1; ++coordonees[1]) {
				if (tableau[coordonees[1]][coordonees[0]] == moyenne) {
					return (coordonees);
				}
			}
		}
		return (coordonees);
	}

	public static int denombrement(double tableau[][], double moyenne) {
		Integer inferieurs = 0;
		for (int i = 0; i < tableau[1].length; ++i) {
			for (int j = 0; j < tableau.length; ++j) {
				if (tableau[j][i] < moyenne)
					++inferieurs;
			}
		}
		return inferieurs;
	}

	public static double[] echantillon_inferieur(double tableau[][], double moyenne, int inferieurs) {
		double[] echantillon_inferieur = new double[inferieurs];
		Integer increment = 0;
		for (int i = 0; i < tableau[1].length; ++i) {
			for (int j = 0; j < tableau.length; ++j) {
				if (tableau[j][i] < moyenne) {
					echantillon_inferieur[increment] = tableau[j][i];
					++increment;
				}
			}
		}
		return echantillon_inferieur;
	}

	public static double[] echantillon_superieur_egal(double tableau[][], double moyenne, int superieurouegal) {
		double[] echantillon_superieur_egal = new double[superieurouegal];
		Integer increment = 0;
		for (int i = 0; i < tableau[1].length; ++i) {
			for (int j = 0; j < tableau.length; ++j) {
				if (tableau[j][i] >= moyenne) {
					echantillon_superieur_egal[increment] = tableau[j][i];
					++increment;
				}
			}
		}
		return echantillon_superieur_egal;
	}

	public static double[] aplanissement(double tableau[][], int valeurs) {
		double[] tableau_a_plat = new double[valeurs];
		int increment = 0;
		for (double[] i : tableau) {
			for (double j : i) {
				tableau_a_plat[increment] = j;
				++increment;
			}
		}
		return tableau_a_plat;
	}

	public static double[] tri_a_bulle(double[] tbl_plat) {
		boolean changmnt = true;
		double tampon = 0;

		while (changmnt == true) {
			changmnt = false;
			for (int i = 0; i < tbl_plat.length - 1; ++i) {
				if (tbl_plat[i] > tbl_plat[(i + 1)]) {
					changmnt = true;
					tampon = tbl_plat[(i + 1)];
					tbl_plat[(i + 1)] = tbl_plat[i];
					tbl_plat[i] = tampon;
				}
			}
		}
		return tbl_plat;
	}

	public static void affichage(double[] tab_plat) {
		for (double i : tab_plat) {
			System.out.print("|" + i);
		}
		System.out.print("|\r\n");
	}

	public static int Dichotomie(double[] tab, double valeur) {
		int debut = 0, fin = 0, milieu = 0;
		milieu = (int) (tab.length / 2);
		fin = tab.length - 1;
		while (debut != fin) {
			if (tab[milieu] == valeur) {
				return (milieu);
			} else if (tab[milieu] > valeur) {
				debut = milieu;
				milieu = (int) (fin - debut) / 2;
			} else {
				fin = milieu;
				milieu = (int) (fin - debut) / 2;
			}
		}
		return (0);
	}

}
